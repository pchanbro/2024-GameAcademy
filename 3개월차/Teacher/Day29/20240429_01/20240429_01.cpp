
#include <iostream>
using namespace std;

//부동소수점 오차를 잡아주는 범위
//프로그래밍에서 실수에서 이정도 오차는 같은 수라고 봐주겠다. << 라고 하는 범위
#define EPSILON 1e-6f // (0.000001)
int main()
{
    //부동소수점
    int a = 1;
    int b = 2;
    bool c = a + b == 3;

    cout << a + b << endl;
    cout << c << endl;

    float d = 0.1;
    float e = 0.2;
    //요게핵심!!!
    //1. 얘가 안되는 건 알아야함. (필수)
    //2. 얘가 안되는 이유. (면접때는 준비해야함) (굳이 평소엔 알필요없긴함.)

    bool f = abs(0.3 - (d + e)) <= EPSILON; // 결국엔 이런코드가 필요할때가 오긴함.

    //Vector 까지 나간마당에
    // float 연산을 안할수가없는데..


    cout << d + e << endl;
    cout << f << endl;

    // 실수의 원리
    // float <- 4byte (32비트)
    // 어떻게 활용할거냐에 따라, 범위가 달라진다.
    // 1비트 -> 양수, 음수
    // N비트 -> 정수를 표현하는데 쓰임.
    // 나머지비트 -> 소수점을 표현하는데 사용.

    // 0.5를 표현할때.
    // 0.5 => 2의 -1제곱
    // 0.25 => 2의 -2제곱
    // 0.75 => 2의 -1제곱 + 2의 -2제곱
    // 0.1 => 어떻게 표현하나요?? 2의 보수가 아닌데?
    //          0.100001


    // 1 => 2의 0제곱
    // 2 => 2의 1제곱
    // 3 => 2의 0제곱 + 2의 1제곱
    // 4 => 2의 2제곱
    // 5 => 2의 2제곱 + 2의 0제곱


    // int <- 4byte (1바이트 == 8비트) (32비트)
    // int의 범위    (1비트 => 양수냐, 음수냐)
    // -21억 ~ 21억  << 2의 31제곱 ==> 21억

}