#include <iostream>
#include <vector> // 대부분의 게임회사에서는 이 벡터를 안쓰고 자체적으로 만든거 씀
// 참고로 우리가 고등학생때 배운 그 벡터랑 다름

using namespace std;

void main()
{
	// 2. vector 이론설명 / 구현

	// vector와 동적배열은 다름
	
	// 동적배열 : 런타임 도중에 할당하는 배열
	// vector : 사이즈가 변할 수 있는 배열

	// 배열 : 메모리가 연속적이다.
	// 처음에 5개를 지정하면 메모리 5칸을 세팅함.
	
	// vector의 단점 : push_back할 때 너무 무겁다.
	// new, delete => 얘네는 우리가 현재 쓸 수 있는 함수중 가장 무거움..
	// 기본적으로 사칙연산보다 백만배 느리다.
	// 근데 push_back할 때마다 new, delete를 쓰니까 무겁다.
	
	// vector의 단점2 : 중간 추가 / 삭제가 어렵다.

	// vector의 장점 : ㅈ접근 속도가 빠르다 .O(1), 
	// 링크드 리스트는 O(n)
	// vector에서 네번째 인덱스에 접근하려면? O(4)만 하면 됨


	// 벡터와 LinkedList의 차이가 있나요??
	// 에 대한 선생님의 답변
	/*네네 많이 차이가 있어요!!
	아까 PPT 설명했을때처럼

	linked list는 뭔가 하나를 찾으려면
	_root에서 계속 next로 넘어가서 찾아야해서
	시간복잡도가 O(n)인 반면

	벡터는 배열이기때문에
	배열인덱스접근처럼 O(1)로 바로 접근됩니다.
	자료구조라는게 데이터를 보관할때 어떤방식으로 저장할지에 대한 챕터다보니, 기본으로 자료를 담고 쓴다.라는개념은 모두 동일합니다.*/



	int arr[10];
}