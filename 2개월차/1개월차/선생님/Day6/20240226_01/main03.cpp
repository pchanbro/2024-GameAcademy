#include <iostream>

using namespace std;

void main()
{
	//배열 
	// - 똑같은 변수명으로 여러개의 변수를 선언하는 문법

	int num1 = 0;
	int num2 = 0;
	int num3 = 0;
	int num4 = 0;

	// --->

	//배열 문법
	//자료형 변수명[크기] = {}
	//{}는 다른 애매한것들에게도 다 통합니다.
	//{} - 비어있는 값으로 초기화한다.
	int num[10] = {};

	//num[0] ~ num[9]까지 생성됩니다.
	num[0] = 1;
	num[1] = 2;
	num[2] = 3;
	num[3] = 4;
	num[4] = 5;
	num[5] = 6;
	num[6] = 7;
	num[7] = 8;
	num[8] = 9;
	num[9] = 10;
	printf("num[0] : %d\n", num[0]);
	printf("num[9] : %d\n", num[9]);

	// 프로그래밍은 대부분의 경우에서 0부터 시작해요.



	//num1 ~ num4까지 출력해라!
	printf("num1 : %d\n", num1);
	printf("num2 : %d\n", num2);
	printf("num3 : %d\n", num3);
	printf("num4 : %d\n", num4);

	//num[0] ~ num[3] 까지 출력해라!
	printf("num[0] : %d\n", num[0]);
	printf("num[1] : %d\n", num[1]);
	printf("num[2] : %d\n", num[2]);
	printf("num[3] : %d\n", num[3]);

	//배열은 여러개 선언해줄 역할을 해줄뿐이지
	//막 그렇게 프로그래밍에 윤택한 삶을 제공하진 않습니다.
	//배열 하나로는

	//ENUM + 스위치문
	//배열 + 반복문

	// => 10이 10번 반복한다를 의미
	for (int i = 0; i < 10; i++)
	{
		//0~9
		printf("num[i] : %d\n", num[i]);
	}

	//이것도 10번반복이긴한데, 위로 외워달라고 부탁했습니다.
	//for (int i = 1; i <= 10; i++)
	//{
	//	//1~10
	//	printf("num[i] : %d\n", num[i]);
	//}


	//array => arr으로 줄여씁니다.
	int arr[1000] = {};

	//초기화하고 
	// (
	// arr[0] : 2, 
	// arr[1] : 4,  
	// arr[2] : 6,
	// arr[3] : 8,
	// arr[4] : 10
	//출력해보는거
	//0 ~ 999 인덱스까지 출력

	//배열을 다룰때는
	//기능단위로 반복문(for문)을 계속 써줘야합니다.

	//초기화!!
	for (int i = 0; i < 1000; i++)
	{
		arr[i] = 2 + 2 * i;
	}

	//출력문구!!
	for (int i = 0; i < 1000; i++)
	{
		printf("arr[i] = %d\n", arr[i]);
	}



	//어? 줄수도적고
	//눈에 한번에 더잘보이고
	//좋은거아닌가?
	for (int i = 0; i < 1000; i++)
	{
		arr[i] = 2 + 2 * i;
		printf("arr[i] = %d\n", arr[i]);
	}


	//배열을 다룰때는
	//기능단위로 반복문(for문)을 계속 써줘야합니다.
	// 왜 그럴까?

	//기능단위로 함수를 만들게됩니다.
	//캐릭터를 움직인다
	//Move라는 함수로  기능단위로 움직이게됩니다.

	//반복문
	//{
	//  기능1; 기능2;
	//}

	// 배열에서 해주는 역할들을 함수로 만들게되면
	// InitArray();
	// PrintArray();

	// 어? 저는 이부분 함수화 안할건데요?
	// -> 함수는 (항상) 쪼갤수록 좋고
	//    다른 프로그래머가 할수도있고
	//    함수로 말을 바꾼다는거 자체가
	//    코드를 말로바꾸는 행위 이기때문에 
	//    이게 말이되어야합니다.

	// 어? 포문 두번돌아가는데 1000번짜리를
	// 성능이슈 (퍼포먼스이슈) 생기는거 아니에요?
	// 절대안생기고
	//  - 실제로 퍼포먼스 이슈가 생겨서 코드를 수정해야하는 그 단계까지 꼭 가주세요.
	//  - 학생일때.
	//  - 요즘같이 컴퓨터 성능좋을때, 그래픽 리소스빼고, 순수 코드로만 퍼포먼스 이슈나오기 힘듭니다.

	//  - 퍼포먼스 생각하다가 코딩을 못하게돼요. 
	//  - 이럼안되는데, 저럼안되는데
	//  - 더좋은방법 없을까?

	// 코드리뷰
	//  남의 코드를 보고 이런식으로 짯으면 더 좋지않을까? 하는 탁상공론 하는 자리입니다.
	//  주로 코드를 라이브(테섭말고 실제 운영중인)에 보낼때 주로합니다.
	//  자기가 생각하고 짠 코드랑
	//  생각안하고 이렇게해야될거같았다. << 이코드랑 
	//  똑같은내용이어도 허용치가 달라져요.
	//  코드마다 철학이 들어있습니다.
}