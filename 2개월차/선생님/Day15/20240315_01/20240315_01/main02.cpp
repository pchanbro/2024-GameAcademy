#include <iostream>

using namespace std;

void main()
{
	// 1. Windows API 배우는 이유

	//  - 기본적으로 게임회사에 들어가면, Windows API로 코딩 안합니다.
	//  - 근데 왜 배우나??
	
	//  - 배우는 이유
	// 게임엔진에서 해주는 일을 
	// 저희가 직접 구현해볼거에요.

	// 그러면 어떤걸 배울수있나?

	// 어떤함수가 부하가 높고
	// 어떻게하면 되게 게임이 최적화가 덜되는지

	// Unity, Unreal
	// 갑자기 게임이 느려져 <<
	// 이러면 이때부터 퍼포먼스 테스트를 시작합니다.
	// 구조부터가 잘못되었다는걸 다만들어갈때쯤 깨닫게 됩니다.

	// 모든걸 직접구현해보기 때문에
	// 어떤 게임엔진을 배우든,
	// 이런식으로 코딩하면 게임을 만들 수 있겠구나

	
	// Windows API 는 
	//  문법을 배우려고 수업을 듣는게 아닙니다.
	//  제가 프레임워크를 만들면서 할건데
	//  그냥 갖다쓸수있을정도만 흡수해주시면 돼요.
	//  프레임워크의 구성요소들이 어떻게 만들어지는지 기억할 정도

	// Windows API로 게임엔진 못만듭니다.
	//  Direct X까지 붙여서 게임엔진 만들면 되는거아닌가요?
	//   그러기엔 저희 수업시간이 터무니없이 부족합니다
	//	 Direct X만 1년 넘게 해야해요.


	// 디자인패턴이라고 게임만들때 사용하는 프로그래밍 기법

	//-----------------------------------------------------
	// 2개월차 까지는 최대한 Windows API 안나가려고 할거에요.
	// 주로 클래스 사용.
	// 주로 쓰이는 기법들
	// C++ 추가내용. (안 배운 내용)


	// Windows API 그럼 왜 외웠냐
	// Windows API를 사용해서 게임 만드는 법을 배울건데
	// 별것도아닌데, 되게 어려운 자료형들 많아서
	// 진입장벽이 되게 높은 편에 속합니다.
}