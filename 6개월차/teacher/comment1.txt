Table

 => 관계형 데이터
 
 => 실제로 데이터가 있는곳
 
 => 데이터 세트 1개당, 1줄(row) 을 차지합니다.
 => 데이터 정보 1개당, 1열(column)을 차지합니다.
 

1. 테이블 생성하는방법
CREATE TABLE 테이블명
(
	컬럼명		자료형
	,컬럼명		자료형
	,PRIMARY KEY (컬럼명)
);

or

CREATE TABLE 테이블명
(
	컬럼명		자료형 	PRIMARY KEY
	,컬럼명		자료형
);


-- 자료형 종류 
-- 정수 : INT (int32) , BIGINT (int64), BIT (bool)
-- 실수 : 되도록 사용하지 않을것,굳이 해야한다면 DECIMAL (고정소수점으로 사용)
-- 문자 : VARCHAR(길이) , TEXT 



2. 테이블에 PRIMARY KEY
PRIMARY KEY : 고유키
(설정해주면 조회할때 빠름.)
(웬만하면 설정해주는게 좋음)


3. 테이블 정의 수정하기
ALTER TABLE [테이블명] 
	ADD COLUMN 컬럼명 자료형;
	
ALTER TABLE [테이블명] 
	DROP COLUMN 컬럼명;
	
ALTER TABLE [테이블명] 
	ADD PRIMARY KEY (컬럼명);
	
ALTER TABLE [테이블명] 
	DROP PRIMARY KEY;
	
ALTER TABLE [테이블명]
	ADD CONSTRAINT 제약사항이름
	FOREIGN KEY (child_column)
	REFERENCES parent_table(parent_column)

4. 테이블 삭제하기
DROP TABLE [테이블명]

5. 테이블에 외래키 설정하기
CREATE TABLE 테이블명
(
	컬럼명		자료형 	PRIMARY KEY
	,컬럼명		자료형
	,FOREIGN KEY (child_column) REFERENCES [부모테이블명](부모컬럼명)
);


6. 테이블에 데이터 넣기
INSERT INTO 테이블명 (컬럼명, 컬럼명 ...)
	VALUES (데이터,데이터 ...)






외래키에 대해..
말이 많은 이유
1. 테이블 삭제조차 맘대로 하질 못합니다.
 
 (이 테이블은 다른테이블과 제약사항이 있습니다.
 그 테이블의 제약사항을 끊고 와주세요.)
 
 DB를 잘하시는분들은 비선호합니다.
 왜냐면 그 정도일은 자기자신이 책임질수있기 때문에,,, 
 

[반박의견 - 외래키를 써야한다.]
 - DB는 회사자산중에서 가장 중요한 자산이다.
 - 그런데 너가 실수안할거라는 단순한 믿음/조금의 편안함 때문에 외래키를 안쓴다?
 - 이거는 잘못됐다.
 

2. DB에서 가장중요한거 (데이터 정합성)
 - 얼마나 DB의 데이터가 정확도가 높은지.
 - 외래키가 설정안되어있으면, 특정테이블 하나만 지웠을때, 문제를 놓칠수있다.
 
 TblChampion 
  _key, _name
  1, 가렌
 
  
 TblUser
 _key, _championKey, _level
 1, 1, 1
 2, 2, 1
 
 티모가 삭제
 
 데이터 정합성에서 문제가 생길수 있다.
 
[반박의견 - 외래키를 안써야한다]
 - 그정도도 관리 못하면 프로그래머가 아니다 . 
 

3. 퍼포먼스 이슈.
 - 외래키를 쓰면, 속도가 느려진다. << 라는 주제로 싸웁니다.
 
 데이터를 추가할때. 외래키를 쓰면 조금 느립니다.
 대신, 데이터를 조회할때, 외래키를 쓰면 조금 빠릅니다.


PRIMARY KEY
FOREIGN KEY

실제 [DB] 구현한다
깡으로 구현한다.

 TblChampion 
  _key, _name
  1, 가렌
  3, 자야
  2, 티모
  ..
  
  10000
  
1, 가렌
2, 티모
3, 자야
PRIMARY KEY 는 DB에 저장할때
저장하는 순서대로 저장시키는 장점
(그래서 조회할때 아주 빠르다)


FOREIGN KEY

다른메모장을 켭니다.
거기에 저장을해요.

데이터를 저장할 때,

포린키
1, 어떤메모장의 몇번째줄.
2, 어떤메모장의 몇번째줄.
3, 어떤메모장의 몇번째줄.

>>어떤메모장의 몇번째줄. 
주소값을 저장해둔거라 

그래서 PRIMARY KEY 급처럼 빠르진않아요.
다만, 설정을 안해둔것보단 빠릅니다. 

_key, _championKey, _level 
1, 		1, 			1
2, 		2, 			1
3, 		2, 			2


반대로, 
데이터를 넣을때는
포린키
1, 어떤메모장의 몇번째줄.
2, 어떤메모장의 몇번째줄.
3, 어떤메모장의 몇번째줄.

이거를 적어야하기때문에 그만큼 느려진다.

결론 : 포린키를쓰면, 삽입은 살짝느려지고, 조회는 살짝 빨라진다.


4. ORM 기법이 나오면서, 포린키가 있으면 개발에 되게 유용해졌습니다.
 - 요거는 ORM기법이 DBA가 없는 회사에서 좋아하기 때문에, 그렇게 유용한 공방의견은 아닙니다.
 



