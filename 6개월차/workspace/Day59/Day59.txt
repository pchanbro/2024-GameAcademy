https://www.notion.so/d74dec13d63943379dc74dcfc7e9c58b
내가 만든 Notion 주소, 아래 내용 대부분 정리해서 올려둠

메모 내용은 올려주심

1. 자격증, 이력서 등 주요 내용은 Notion에 올려두기
	=> 이력서를 신입 때 한 번 쓰고 마는게 아니라, 
	1년마다 한 번씩 업데이트 해줘야한다.

Notion 쓰는 방법은 하루정도면 배울 수 있다. 
앞으론 요즘 유행하는 Notion을 잘 활용해야 한다.
Slack, Notion 모두 Markdown 기반이다. -> Markdown이 뭐였는지 다시 한 번 알아보자.

이유 
1) 연봉협상이 망할 수 있다.
  => 연봉동결 => "회사 나가줬으면 좋겠다."
   취준일때는 이력서 쓰는거 하루 투자하는거지만 
   회사다니면서는 진짜 힘듬

2) 내가 퇴사할 생각이 없더라도 다른곳 면접은 한 번씩 봐주는게 좋다.
  => 한 회사에 오래있으면, 썩는다.
   하는일이 기술적으로 어려운 일이 아니라 그 회사에 대해 오래동안 알고있으면 할 수 있는 일들을 시킴 
    이런 일들은 내 경력에 도움은 안되고 이직에도 도움이 안됨
  + 이직할 때 연봉이 제일 많이 오르기 때문에 틈틈이 이직을 준비하는게 좋다. 
  -> 선생님의 경우 고졸출신이라 매우 낮은 연봉으로 시작했으나 이직 때마다 30%씩 연봉이 올랐다고 한다. 

2. ★포트폴리오 
-> 자기소개서는 포트폴리오가 괜찮으면 읽는다 (특히 프로그래머의 경우는 대부분 글을 못쓰기 때문)
 (그렇기 때문에 포트폴리오에 많은 시간투자를 해야한다.)

=> Notion + 영상 포트폴리오 준비가 가장 Best

[포트폴리오 영상]
 1) 인게임화면 위주로 최대한 주요내용 연속으로 보여주게 5분에서 10분정도 
   => 너무 길면 안본다, 이것도 계속 넘기면서 보다가 재밌는 듯한 내용이 있으면 확인한다.
   (쇼츠 용도로는 2분정도)

 2) 자막에는 코드 아키텍처 (싱글톤, 이벤트 바인딩), 알고리즘 (Astar) 설명해주면 좋다. 
 
 3) 갯수 : 제일 좋은건 2~3개, 1개는 완전 빡세게 만든거 위주로 하면 된다.
                                     (전력으로 만든 것, 


이후 내용은 선생님이 올리신 메모 확인하면서 어떤 내용이었는지 좀 떠올려주기






이력서
(notion + 포트폴리오)

포트폴리오 만드는 방법 

0. 포트폴리오 게임 선정
 - 기획에 자신이 없으면 모작을 만들어라
  => 기획에서 막히면 게임 만들기 싫어지기 때문이며, 모작은 확실히 기획되어 있는 게임이기 때문에 걱정이 없다.

1. 전력을 다해 만드는 게임

2. 시스템 위주의 게임 (RPG의 특정 부문 배틀이나 NPC와의 대화)

3. 간단한 게임 출시 (2048, 똥피하기 등) -> (안드로이드 기준 10000원 정도 소요) 
   - 게임 출시 경험을 매우 좋게 여긴다. 
     => 안드로이드에서 요구하는 마무리 작업을 하는데 많은 노력이 들어가기 때문
     => 그 경험이 있는지를 귀중히 여긴다. 

3 -> 2 -> 1 순서대로 게임을 만드는게 좋다. 
그래야 실력도 쌓이고 3번 2번의 경험을 합해 1번을 만들어 내는 것이기 때문

3, 2번까지만 하고 이력서를 제출하면서, 1번을 하기 그게 시간 효율이 좋다. 

만약에 만들어둔 게임이 5개정도라면 3개만 고르는게 맞나?
-> 5개가 큰 차이가 없어보이면 5개 다올리는게 좋은데

첫번째 게임이 진짜 좋은데 (내가 10년차에 만든게임)
마지막 5번째 게임이 진짜 너무 별로다(신입때 만든거)
싶으면 그런건 올리지 말아야 한다.

=> 결론은 많이 올려도 숫자 채우기에 불과함, 위에 3개만 본다.

그러니 영상으로는 3개정도 올려주는게 좋다.
나머지는 대충 스크립트로 올려라

 더 보고 싶으면 애초에 면접에 부를 거다.

즉 포트폴리오는 그 사람이 어떤 사람인지 보고싶게 만드는게 핵심이다.

보통 사람은 3개 만들때마다 수준이 올라감 그런거 감안해서 게임을 만들고 포트폴리오를 수정해라

근데 사실 들어가고 싶은 3N, 등등 취업하는데 영향을 끼치는 가장 큰 요소는 바로
'운'이다. 
보통 회사에서는 TO를 받는 즉시 사용안하면 사라지기 때문에
그 때 지워한 사람들 중에 가장 괜찮은 사람을 뽑는다.
그렇기 때문에 왜 이사람이 들어왔지? 싶은 사람들도 들어갈 때가 있다.

물론 스타트업에서 시작하면 실력적으로 많은 향상을 이뤄낼 수 있지만.
이후 이직할 때 자신을 증명해내야 한다.

하지만 운으로라도 대기업에 취업하면 추후 이직할 때 많은 영향을 끼친다. 
어떤 길을 가도 열심히 하자. 
지금 당장 열심히 하자.....


- 포트폴리오 문서 어떻게 적어야 하나?

문서 + 영상

문서 PPT PDF 등등
 - 프로젝트 요약
   => 어떤 프로젝트 인지
 - 참여 인원(1인 제작이 깔끔하긴 함)
   => 몇명 참여했는지?
   => 나는 어떤 역할이었는지? (ex) 베타테스트부터 참여) 
 - 기술 
   => 어떤 언어를 사용했는지?
   => 어떤 아키텍처를 사용했는지?
   => 어떤 라이브러리, 프레임워크를 사용했는지?
 - 기타
(보통 이 아랫내용을 보고 윗내용을 보는데 순서상 이렇게 작성하는게 맞다)
 - 스크린샷 or 영상
 - 프로젝트 개발 내용
   => 예시) 대화 다이얼로그 구현
     => 대화 데이터테이블 정의 
       => 어떤식으로 구성했다. 
         => 왜냐하면
       => 이런식으로 했을때 용이한 점
       => 문제점 / 개선점 (자기 문제를 알고 개선점을 확신한다면 적는다, 개선점이 없고 문제점만 있다면 적지 말아라)
       => 개선점이 있어도 TMI가 섞이게 되는 설명이라면 적지 마라 ( 이게임 구조상 ~~어쩌구저쩌구 하다 상대방이 뭔소리야? 싶으면 마이너스)

   => 예시 2) 개발과정중 문제가 발생했고 해결이 된 경우 (TMI내용이라면 적지마셈, 깔끔하게 작성이 되서 개발을 모르는 사람이 들어도 합리적이면 작성가능)
     => 현황 (문제점 요약)
     => 작업 (문제점 해결과정)
     => 성과 (문제가 어떻게 수정되었는지) 
   => 예시 3)
     => 현상
       => 기획자가 자주 데이터테이블에 오류를 발생시킴
     => 작업
       => 기획자가 게임을 실행해보면 에러로그에 어떤 파일의 어떤 줄이 유효성체크가 제대로 안되었는지 명확하게 표시해서 기획자가 수정하기 용이하게함.
     => 성과
       => 매일 1~2번정도 데이터테이블을 크로스체크 해야하는 불편함 수정
       => 생산성 증가




자기소개서 정리

자기소개서 유형
 1) 회사에서 질문지를 정해줌
    - 지원동기
    - 자신의 장단점
    - 10년 후의 모습
    - 성장 배경
 2) 자유형식의 자기소개서

둘 다 준비해야 한다.



자유형식의 자기소개서 <= 한 번만 작성해두면 됨

tip 
  - 자신이 있었던 사건 중, 내가 긍정적으로 변한 사건 중 꽤나 흥미로운거 다 적어두기
  ㅁ 기억날정도로 키워드만
  ㅁ 개발 관련이면 좋지만, 없으면 대학교 썰, 친구들과의 이야기 (신입 기준이기에 기대가 없고, 상관 없다)

  - ★리스트업이 많은사람은 10개, 적은사람은 3개
  ㅁ 진짜진짜 없다 싶으면 SWOT 작성하기
    => 강점(Strength), 약점(Weakness), 기회(Opportunity), 위협(Threat)
  ㅁ 너무너무 없다. (근데 이 경우엔 그닥 좋았던 경우는 없다)
    => 진짜 너무 미친듯이 없다. MBTI 검사를 통한 성격 장단점을 사건에 억지로 끼어맞추기
  ㅁ 가고싶은 회사들의 인재상을 다 적은 후에, 그 키워드와 나를 기준으로 마인드맵 그리기
    => 이상한말 적어도되니까 키워드로 가득한 마인드맵 그리기
     - ex) 창의적인 사람 => 마인크래프트

  - 자기소개서는 과장은 가능한데 허구는 안된다.
  ㅁ 자기소개서 안에서만큼은 나는 영웅이다.

1. 소제목으로 그럴싸한 문구 적어서 여러 개의 소제목 + 내용으로 된 자기소개서를 만든다.
 - 내용은 사건 + 해결과정을 적으면 된다.
   - 무슨 문제가 있었다. + 어떤 피드백을 진행했다 + 그래서 난 어떻게 되었다.
최소 3개 최대 6개
내가 나중에 혹은, 친구한테 읽게 시켰을때 하품나오면 다 지우기
최대한 자극적으로, 이사람 뭐지? 싶을정도로
- 물론 거짓말 같은 느낌은 피해라



질문지를 회사에서 정해주는 경우
 - 지원동기
 - 자신의 장단점
 - 10년 후의 모습
 - 성장 배경
 - 기타 등등
여기서 핵심은 질문의 요지를 파악하는 것

조금씩 의미가 있는데 구글 검색하면 다 나온다. 

1) 회사별로 인재상 검색하기
 - 예시
   - 창의적인 사람
   - 도전하는 사람
   - 다양한 문화를 경험하는 사람
ex) 펄어비스 => 야성 - 성공 해본사람, 집요 - 실패해도 재도전 해본사람, 신뢰 - (유저와의 약속을 지키기 위해)야근하는 사람

질문지는 보통 3~5개
-> 자유형식의 자기소개서에서 썰 가져올만한게 꽤 있다. 
(5개중 2개정도는 가져올 수 있다.)

1. 그럴싸한 문구 
 - 무슨 문제가 있었다. 
 - 어떤 피드백을 진행했다.
 - 그래서 난 어떻게 되었다.
이 세트를 질문지마다 넣어주면 된다. 




코딩테스트
일단 문제 꼼꼼히 읽어라
문제 잘못읽고 풀어서 나중에 다시풀면 이미 망한거
5분정도 더 투자해도 좋으니까 천천히 문제 이해하고 풀기

5문제 정도 나온다.
적게 나오면 3문제

컷이 3.5문제고 적게나오면 2문제

1번, 2번은 기본기로 풀려야 함
- 주로 나오는 문제
  - 문자열 가지고 놀기
    - 문자열 뒤집기
    - 중복문자삭제 (aaabbbccc => abc로)
    - 문자열 파싱 "a 18 : 00 : 00 0" "a 19 : 00 : 00 1" 이랬을때 a 차량의 주차시간은 총 몇시간인가?
  - 그리디 알고리즘 
    - 6400원을 내야하는데 
     - 5000원, 1000원, 500원, 100원 몇개를 내는게 가장 숫자가 적게 내는 것인가?

3번부터는 말을 코드로 바꿀 수 없는 내용들이 나오기 시작함
  - Graph < 말로 설명하기 어렵다.

근데 유형 총 갯수 해도 100개도 안된다 했었다

-> 모든 유형을 공부해야한다!!

3,4,5번에 주로 나오는 유형(핵심)
DFS, BFS << 이거 못풀면 다른거 풀어도 떨어짐
  어떤 문제가 이걸로 푸는건지 파악할 수 있어야 함
  나의 코드로 미리 짜두고 이 문제 나오면 핵심 로직 옮기고 바로 숫자만 체인지해서 쓸 수 있게

Dynamic Programming(DP)
나왔을 때 모르면 틀려야 함
1번부터 5번까지 다 읽고 1번부터 푸는데, 문제 한 번 읽고 DP로 푸는 문제다 싶은건 어떻게 풀어야 하지?를 계속 생각해야 한다.

프로그래머스 가서 문제 푸는데
카카오 문제 좋다.
현대 문제 어렵다 좋지 않다 풀지 마라
1 ~ 3 레벨중 풀어라
문제보고 어떻게 풀어야할지 감조차 안잡히면 정답이나 치트키 보고 풀자

한문제당 3시간씩 걸리는데 하루 2문제씩 풀면
한달정도면 충분하다

꿀팁
코딩테스트도 운이다.
코테 만점자도 떨어지는 경우가 있다.
 - TO가 없어서
 - 포트폴리오가 별로라서
 
코테를 c++로 볼꺼면 
#include <algorithm> 이거 공부해라 (무슨 함수가 있는지 정도) (속도를 많이 올려준다)

코딩테스트의 3시간~5시간 주는시간이 안부족하려면
한 문제당 15분정도 읽고, 이해하고 바로 풀 줄 아는사람이어야 한다.

