#include "pch.h"

void Comment1()
{
	// 수업할 내용

	// 1. 사운드 매니저 ( 오랜만의 수업이니 별로 안중요한 내용 )
	//  - 사운드 코드는 쓸 줄만 알면 된다.
	//  - 모든엔진에서 사운드를 깊게 다루지 않는다.
	//  - 어떻게 시작하는지. 어떻게 사운드파일을 로드하는지. (로드하는방법도 별로 안중요함)

	// 사실 사운드매니저는 따라치는게 전부
	// 선생님도 인터넷소스 없으면 못침
	// 굳이 알필요도 없다.

	// 사운드 전문으로 하는 팀
	// 이 팀에서도 사운드 관련코드는 그때그때 라이브러리 가져다 쓴다.

	// 2. 충돌체크 

	// 3. UI
}

void Comment2()
{
	// 사운드매니저

	// 사운드
	//  - 외부 리소스파일

	// 사운드 실행
	//  - 사운드 카드
	//  - 아주 옛날에는 지금 CPU가 인텔, AMD 있듯이
	//  - 사운드카드도 제조사마다 다 다르게 있었다고 한다.
	//  - MS에서 규격을 하나 내고 이거 아니면 윈도우에서 안받아준다고 해서 통일됨.

	// 버퍼란 byte array
	// 모든 파일은 byte로 이루어져 있다.
	// byte array란 
	// exe파일같은거 메모장으로 열 수 있는데 읽을 수 없는 이상한 글자로 열린다.
	// 그런 글자들? DAY30 영상 초반 다시보고 뭔지 파악해봐도 되고 검색 ㄱㄱ
}

void Comment()
{
	// 쉬는시간 강의
	// 이 수업 전체가 끝나면
	// 엔진을 배워야한다.(게임컨텐츠 개발자로 취업할거면)

	// 언리얼, 유니티

	// 독학을 한다라면

	// 유니티는 (unity tutorial) 이라는거 구글검색 - Scripting 위주로 한국어는 푸는게 좋은데 그게 이해하기 쉽겠지

	// 언리얼도 언리얼 튜토리얼 구글에 검색 - 에픽게임즈에서 올린거 전부 영어 강의라 영상보고 따라해야함 blue print랑 c++먼저 배우는게 좋다
}

void Comment3()
{
	// 컨텐츠 분리
	// (#define USE SOUND)

	// 예를들어
	// 롤에서
	// 1주차에 아리 리메이크
	// 2주차에 파이크 신규추가 한다하자

	// 그럼 1주차와 2주차 사이에는 코드를 업데이트하면 안되나??

	// 예전에 롤토체스
	// 버그가 100개

	// 기존 업데이트
	// [코드분리]
	// 신규 업데이트

	//#define USE_SOUND

	//#ifdef USE_SOUND
	////USE SOUND 를 하면 실행되는곳
	//#else
	////USE SOUND 를 하지않으면 실행되는곳
	//#endif
}

// 숙제는 2048 만들기

void Comment4()
{
	// 충돌체크
	// 게임에서의 충돌체크 (2D)

	// [원, 사각형, 점]
	// 많이쓰는 이유 : 제일 가볍다.
	
	// 충돌로직은 되게 계산할게 많다.

	// 점과 직선사이 거리 (수학) (다각형만큼) (10각형이면 뭐 10번정도) 뭐 이런거 다 해주면 빡빡함, 오래걸림
	// 계산시간이 오래걸림
	//  - 매프레임. 체크를해줘야하는데
	//  - 매프레임 호출되는것 중에서 계산시간이 오래걸리는건 안쓰려고 함
	//    프레임이 튄다.
	// 철권하는데 1프레임씩 0.1초 걸린다고 하면
	// 사람들이 그 게임 안함

	// 최적화는 리소스로 하지만
	// 충돌체크만큼은 로직에서 한다!

	
	// CircleCollider
	// Box와 Box (구현완료)
	// Circle와 Circle (구현해야함)
	// - 게임수학으로 알아둬야 한다. (면접에서 물어봄)

	// Box와 Circle (구현해야함)
	//  - 이건 안물어봄
}

void Comment5()
{
	// Circle와 Circle
	// Circle1과 Circle2의 중심좌표 사이 거리가
	// 두 원의 반지름을 합한 것보다 작으면 접촉
	// 즉
	// 중심좌표 사이 거리 <= (Circle1 반지름 + Circle2 반지름)
	// 이면 접촉했다는 것

}

void Comment6()
{
	// 퍼포먼스 테스트
	// 특정함수나, 특정 코드가 얼마나 오래걸리는지 테스트해보는것
	// 단위 테스트, UnitTest

	// 이런 테스트의 경우에는 
	// 백만번 실행하는게 의미가 있다.
}

// 숙제
// boxcollider의 circle부분 마저 완성시키는거
// 2048 만드는거