#include "pch.h"

void Summary()
{
	// 1. CenterRect, Vector(지난수업 급하게 한 것 ) 이해
	// 2. 충돌 처리
}

void Comment1()
{
	// 1. CenterRect
	// 2D게임을 제작하다 보면 충돌체크를 할 일이 매우 많음
	// 충돌체크란 A오브젝트와 B오브젝트가 부딪혔는지 체크하는것
	// EX) 슈펴마리오, 마리오가 버섯과 충돌했는지, 몬스터와 충돌했는지
	// 마리오, 버섯 충돌 ==> 마리오가 커짐
	// 마리오, 몬스터 충돌 ==> 작아짐, 죽음

	// 게임컨텐츠 Contents 로직에서 70%는 충돌로직이다.
	// 그만큼 충돌로직이 매우 중요하다.
	
	// 19일 숙제도 대부분이 충돌체크로 일어난 게임이다.

	// 충돌체크가 매우 중요하니 
	// 숙제를 새롭게 하나 주실 것임
	// 벽돌깨기

	// 충돌을 대체 어떻게 할 거냐??


	// 2D게임에서는 충돌패턴이 3가지 
	// 점, 사각형, 원
	// pt, Rect, Circle

	// 그 중 2개의 조합에서 5가지 쓰임(보편적으로)
	// ptInRect
	// ptCircle
	// RectInRect
	// CircleInCircle
	// RectInCircle (이건 별로 안쓰긴 함)

	//  == (점과 점) 이걸 제외했음 그냥 == 처리하면 되니까

}

void Cmment2()
{
	// Vector
	
	// Vector란 무엇인가?
	// C++에서의 자료구조 vector가 아님

	// 여기선 기하와 벡터에서의 벡터
	// Vector는 점과 방향정보를 가르키는 변수
	// 2D에서는 (x, y) 3D에서는 (x, y, z)

	// x, y라는 변수로 할 수 있는것은
	// 위치정보, 방향정보 두 가지밖에 없음
	// positionX, positionY
	// directionX, directionY

	// x, y라는 변수를 가지고 있기 때문에 (위치, 방향)정보를 가르키는 변수가 된 것
	

	// 내적과 외적 중 내적만 배울 것
	
	// 외적은 보통 회전할 때 다룸(3D) 그래서 지금은 외적을 다루지 않음
	// 근데 외적도 하나 쓰긴 쓰는데 나중에 알려줌
	// 무엇보다도, 2D에서는 외적이 없다.
	// 외적이란 두 Vector 사이의 수직 Vector(법선벡터)를 구할때 사용한다. (2D에서는 z가 없으니 못구한다.)

	// 내적은
	// 어떤 미친 수학자가 공교롭게도 수식을 하나 발견했다.
	// A벡터와 B벡터가 있을 떄
	// A.x * B.x + A.y * B.y = |A| * |B| * cos(theta)
	// x요소끼리 곱한것과 y요소끼리 곱한걸 더하면 A B 크기와 그 사이의 각에 대한 코사인 값을 더한것과 같다.
	// 라는 공식을 발견했다.

	// Vector 2개를 가지고 있으면 (x, y 값을 알고있다)
	// 벡터 내적의 값 / |A| * |B| = cos(theta)
	// A와 B사이의 각도를 구할 수 있다.
	// theta
	// 프로그램이기 때문에 cos없애는거? 일도아니다(함수 하나면 없애기 가능하다)
	// acos(벡터 내적값 / |A| * |A|) = theta 값(각도 값)

	
	// 결론!!! 핵심!!!
	// 내적은?
	// 각도(theta)를 구하기 위해서 쓴다. 
	// 0 ~ 180도가 나오게 된다. 180도가 넘어가면 큰 부분이 아닌 작은 부분을 구하기 때문이다.
	// 게임에서 각도를 구할 일은 상당히 많다.

	// 게임수학은 이해를 기반으로 외우는것
	// 어차피 외우는 것!
	// 수학을 잘하는 사람이나 못하는 사람이나 어차피 더 빨리 외운 사람이 더 빨리 코드치고 더 잘쓴다.
	// 아무리 수학 잘해도 그때그떄 생각 안남, 외워야 생각남

	// 내적 = 각도
	// 2D에서의 외적 = 방향 (왼쪽이냐 오른쪽이냐만 다룬다.)

	// 내적의 의미
	// A 내적 B를 한다면
	// A벡터를 B벡터에 투영시켰을때 그 길이의 값이다.
}

void Comment3()
{
	// 반사벡터
	// 벡터가 "방향벡터"라고 가정했을 때,
	// 벽같은거에 부딪히면
	// 꺾여야 한다.

	// 벡터의 반사.


	// 실습 한 번 해보자.
	// 우리가 배운거로 충분히
	// Original Vector와 Normal vector 사용해서 Reflected Vector를 구할 수 있다.
	
}

void Comment4()
{
	// CenterRect
	// 점, Rect, Circle

	// Rect => 사용하기 불편하게 되어있는 변수
	// 1. 이동하려면 모든 변수를 수정해줘야 한다.
	// 2. 이동할 때, 소수점단위로는 이동할 수 없다.
	//    (소수점이 계속 합쳐지면 정수단위로 넘어갈수 없다.)

	// 사용하기 편한 사각형 변수
	// CenterRect

	// CenterRect 특징
	// 중심점을 position으로 잡고 있다.
	// width와 height를 가지고 있다. (중심점을 기준으로 한)

	// 그러면 앞으로 이동할 때, left right top bottom 처럼 모두 변경시키는게 아니라
	// 중심점 (position)만 이동시키면 전체가 이동한 것 같은 효과를 볼 수 있다.

	// ToRECT는 
	// Rect로 만들어진 함수들이 기존에 있어서 사용하는 함수
	// 현재 CenterRect 기준으로 RECT 자료형으로 새롭게 만든다.

	// 프로그래밍에서 
	// To ~~~
	// From ~~~ 이런것들은
	// Convert 라고 하는데
	// A 자료형에서 B자료형으로 옮길때 사용
}

void Comment5()
{
	// inline 키워드는 #define (define 매크로 한것과 같은 속도를 내기 위해서 사용함)
	// (매크로 속도가 엄청 빠름)
	// 근데 cpu 마음이라
	// inline을 쓴다해서
	// 빠르게 해줄지 말지는 cpu가 알아서 결정
	// (쓴다고 해서 손해는 없음)
	// 하지만 여태까지 안쓴이유
	// inline단점 : 헤더에서만 구현해야함.
	// 헤더에서 구현하면 코드가 꼬이는 link error가 발생
}

void Comment6()
{
	// 다음숙제

	// 벽돌깨기
	// 수요일에 하루종일 벽돌깨기 할거임 
	// 꼭 하기


	// 충돌잘하면
	// 나머지는
	// 이미지 붙이면 끝임
	// 진짜 충돌 잘해야함
	// 충돌 잘하면 나머지는 최적화만 하면됨
}