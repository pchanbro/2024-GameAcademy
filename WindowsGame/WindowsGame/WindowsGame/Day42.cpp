#include "pch.h"

void
Comment1()
{
	// 오늘 데이터매니저까지만 만들고
	// 서버 수업 진행

	// 서버가 끝나면 게임을 만드는것과 네트워크연동 동시 진행

	// 숙제완료율이 낮은 편..
	// 여태까지 배운내용으로 타워디펜스를 만들 수 있는데

	// 서버 (C#으로 새롭게 배움)
	// 이거 하면서 할 수 있는 학생은 타워디펜스를 먼저 만드는게 좋겠다고 생각해서 
	// 이렇게 진행하려고 함

	// C#이라는 새로운 언어
	// 서버 (웹 서버)

	// 서버연동으로 게임만들기

	// + 당장 쓸 수 있는 이미지가 없다. -> 제작을 해야함
	// 타워디펜스 같은 (비교적) 볼륨 큰 게임 만들어보는 경험 중요함

}


void Comment2()
{
	// DataManager

	// 1. 게임에서 사용하는 데이터를 어떻게 관리할것인가??
	// 기획자가 입력하기 편해야함
	
	// 데이터
	//  - 여러가지 형태로 게임의 데이터를 저장한다.

	// 1. text or binary
	// 2. excel
	// 3. json(구조체를 텍스트로 변환하는 방법 중 하나)

	// 그래서 Json이 무엇인가? (되게 많이쓰임, 서버에도 많이쓰임)


	// 데이터 -> Parse을 해야함. (그래야 사용이 가능해짐)
	// Parse란?
	// 데이터를 원하는 데이터로 가공하는 작업


	// JsonParse는
	// C++에서는 따로 지원해주는 함수가 없습니다.

	// 만들어둔 Library가 상당히 많습니다.

	// 보통게임회사에서 많이쓰는 JSON Library 
	// Rapidjson (Tencent라는 게임회사 에서 제작)


	// 좋은 라이브러리 판별법
	//  
	// 라이브러리를 써야하는 상황 (추천받아서 사용하는 경우 제외)
	//  - 무슨 기능을 구현해야하는데, 기능이 너무 명확하고, 누군가가 만들어놨을것같은 경우

	// github에서 검색하고, 언어 체크하고 우측 상단에 목록 표시할 때
	// most star
	//  -> 좋아요

	// star수가 어느정도는 되어있어야 안정적인 라이브러리

	// github에서 따로 검증해주지 않아요.
	// 이 라이브러리가 좋은건지, 아니면 더이상 못쓰는건지, android나 ios 하나만 사용가능한지 등등

	// 1. Star수가 1k이상 인지. (star수가 적으면 쳐다도 보지 마라, 시간낭비 한다.)
	// 2. Release가 최근까지 계속 이어져오고 있는지.(최근 다운로드 수)
	// 3. Issue가 계속 수정되있는지. (open이 계속 수정 진행중인 것들, closed가 오류 수정이 완료된 것들)


	// 라이브러리 사용방법
	//  1. Installation
	//  2. Usage
	// 를 무작정 따라한다.

	// 무작정 따라할 때 주의할 점 : 새 프로젝트 파서 해야한다.

	// rapidjson 붙이기.

	// 보통은 C++ 라이브러리는
	// include, lib 폴더 두 개 있다.

	// include => .h
	// lib=> .cpp 이기 때문에
	// 보통 둘 다 붙여주는데

	// 이번에 쓸 rapidjson은 include에 둘 다 들어있어 하나만 붙이면 된다.

	// ThirdParty 폴더 -> 프로그램의 소스가 아니라 외부 라이브러리 파일들을 넣는 곳을 보통 ThirdParty라고 이름 붙여준다.

	// 외부 파일(라이브러리 등) 을 쓸 때
	// 프로젝트 우클릭 - 속성 - 구성(모든 구성) - 플랫폼(모든플랫폼) - C/C++ (추가 포함 디렉터리 편집(이게 include path)
	// 추가 포함 디렉터리 편집 시 $(SolutionDir)을 경로에 사용해주면 컴퓨터마다 다른 경로를 프로젝트가 존재하는 파일을 찾아줘서
	// 다른 컴퓨터에서도 사용할 수 있도록 만들어준다. 자세한 건 Day42 57분쯤 영상 확인



}