#include "pch.h"

//기능
//	- Map 구현 [V]
//	- 타워 건설 기능 [V]
//	- 몬스터 AI [V]
//	- 타워 공격 기능
//	- WAVE 시스템 기능 [◇]
//	- Life 기능
// 


void Comment1()
{
	// 몬스터 AI
	//  - MonsterActor를 화면에 생성한다
	//  - StartPoint, EndPoint에 따라서 움직이도록 설정한다.


	// 1. 화면에 몬스터를 생성하는거까진 완료.
	// 2. 시작지점에서 끝지점으로 이동한다.
	// 


	// 몬스터 조작
	// Controller, Brain, AI
	// Component를 보여드리고싶어서

	// MonsterBrain이라는 컴포넌트를 만들어서
	// MonsterActor에 붙여보도록 하겠습니다.

	// MonsterBrain 컴포넌트 
	//   ==> 실질적인 몬스터 Actor한테 행동을 내려줌
	//   ==> 사실 컨트롤러
	//   ==> Actor는 Actor만의 고유한 행동 (어디로가라, 공격한다)
	//   ==> Brain은 이 맵에서 이 Brain이라는 컴포넌트를 장착하면
	//     - 이 Brain을 착용한 몬스터는 이 맵에서 이렇게 동작을한다. (이런 기능을 정의)


	// 시작지점에서 끝지점으로 이동한다.
	//  AI에 대한 내용 Brain에 코딩
	//    웨이브가 시작하면 Path를 넣어주겠다. + 시작지점으로 텔레포트 시키겠다.

	//  웨이브가 시작하면 -> 
	//		1. 몬스터를 시작지점으로 순간이동시킨다. 
	//		2. 몬스터의 시작지점부터 끝지점까지 Astar를 한다
	//		3. 몬스터를 Astar대로 이동시킨다.


	// vector<Vector2> path가 주어졌을때, 이거대로 움직이는방법
	// path[0]으로 순간이동한다
	// _pathIndex에 따라서
	// _destPos = path[_pathIndex] 로 설정해주고
	// _destPos와 가까워졌을때마다 _pathIndex를 하나 증가시켜준다.

	// 시작지점 끝지점에 대한 정보


	// Astar해서 값을 넣어주면 됩니다.

	// 몬스터 데이터

}


void Comment2()
{
	//	- 타워 공격 기능
	//	1. 타워가 몬스터를 바라봐야합니다.
	//  2. 타워가 몬스터를 사정거리안에 있는지 체크
	//  3. 사정거리안에있으면 공격속도대로 공격
}