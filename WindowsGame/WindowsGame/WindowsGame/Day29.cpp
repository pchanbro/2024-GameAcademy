#include "pch.h"

void Comment1()
{
	// 지금까지 한거 CTRL + Shift + F 로 찾으면서 공부하기

	// 오늘이 Day29
	// 중간정도

	// 다음주면 4개월차

	// 1 ~ 3개월
	//	- 기본문법
	//	- 프로그래밍적 사고 방법 (수도코드)
	//	- 게임 기초

	// 4 ~ 6개월
	//	- 게임 만들기 (4개월차) (1달 동안 게임하나 만들거임)
	//	- 웹 서버 만들기 (5개월차)
	//	C#을 배울것 (새 언어) 깊게는 안함

	// 6개월차에 (아래는 선생님 생각으로 중요한 순서로 작성)
	//	- 게임 소켓서버를 배울지
	//	- Direct X 배울지
	//	- 포트폴리오 만들시간을 줄지
	//	- 코딩테스트를 할지

	// 코테가 가장 안중요한데 그래도 입사할 때 필요하니 그 방법을 알려주자면
	


	// 코딩 테스트 공부법!!
	

	// 프로그래머스 홈페이지, 알고리즘 책 등 여러가지 이용하셈

	// 수도코드 짜고
	// 수고코드를 내가 원하는 문법으로 바꾸기 (C++)
	// 훈련을 해야한다.

	// 공부안하면 현업 10년차, 20년차도 손도 못댄다.

	// 대학수능 수학문제
	// 25번 ~ 29번 문제는
	// 유형 약 150개 정도에서 수치만 변경해서 나옴

	// 비슷하게 알고리즘 유형 약 30개 정도에서 지문만 살짝 변경해서 나옴

	// 알고리즘 유형은 모아둔곳이 많다.
	// (프로그래머스, 책)
	// 딱 한권만 구매
	// 알고리즘을 외우거나, 한번씩 쳐보기
	// 코딩테스트 공부시점 (취준 같이함) 
	// 하루 10시간 공부 기준 -> 5시간 코테, 5시간 이력서 작성
	
	// 이거 한달하면 다 배움
	// 알고리즘 유형을 외우면 된다.

	// 코딩테스트 
	// 1. 현업에서 쓸 데 없다.
	// 2. 근데 보는 이유 >> 성의의 문제
	// 3. 어떤 사람은 이걸 공부하는데, 어떤 사람은 이걸 공부하지 않는다. -> 그럼 누굴 뽑겠냐
	
	// 뭐 웬만한 기업은 다 한다. -> NC 넥슨 카카오 네이버 등등
}

void Comment2()
{
	// 목표 
	// 4개월차 중순까지 프레임워크 완료
	
	// 이후에는 자습하면서 1대1로 봐주심
	// 포트폴리오 점검느낌 1:1계속 봐주실 것
	// 이때는 웬만하면 오프라인으로 나오는게 좋음
}

void Comment3()
{
	// 오늘 수업
	// 공격모션 이후
	// 다른 모션은 공격모션을 응용해서 하는거기 때문에 스킵하겠다.
	
	// 오늘 할 거
	// 1. 카메라
	// 2. 충돌체크 마무리
	//	-(그동안 출동체크가 BoxCollider 밖에 없다. CircleCollider까진 있어야 함)
	// 3. 시간 남으면 UI
}

void Comment()
{
	// 카메라는 무엇인가?

	// 씬을 구성하는 큰 단위
	// - 1. 카메라
	// - 2. World
	// 이 두개만 있으면 어떤 것이든 구성할 수 있다.

	// 그러니 게임에서는 Camera가 매우 중요하다.
	// 그래서 카메라란?

	// 유저 모니터에 비쳐지는 화면을 어떻게 찍을것인가?


	// 카메라 연출 방법
	// 2가지 존재.

	// 1. 카메라가 움직이기.
	// 2. 나를 제외한 모든 배경이 움직임(플레이어는 움직이는 모션만 출력)

	// 아무래도 2번은 절대 안할 것 같은데
	// 은근히 2번도 많이 함 -> 쿠키런 같은 런 게임, 1942같은 탄막 슈팅게임

	// 우리는 보편적인 카메라 움직임을 위해 1번을 할거다.

	// 근데 사실 원리는 똑같다.
	// 결국에는 눈속임이다.


	// Component 란?
	// Actor한테 들어가는 기능들
	
	// CameraComponent
	//  액터를 찍는 카메라
	//  포켓몬스터 같은 카메라(탑뷰)
}

void Comment5()
{
	// 개발도중 문제가 생겼을 때 값을 확인하는 방법

	// 1. 로그찍기
	//	- 라이브 도중일 때
	//	- 재현이 안될 때 (재현스텝)
	//	- 중간에 멈추면 안될 때. (보통 개발자가 앎) (센서같은거 실시간으로 그래프그려야하는데 틱 하나가 튄다.)
	//	- 주로 네트워크 이슈

	// 2. 디버깅
	//	- 재현이 될 때
	//	- 개발중일때
	//	- 중간에 멈춰도 될 때
}

void Comment6()
{
	// rv = Clamp (a, min, max)
	// a의 값을 min과 max사이로 제한을 둬서 rv로 리턴해준다.

	// Lerp
	// 게임에서는 되게 많이쓰인다.
	// 만만한 연출 로직

	// rv = Lerp(start, end, percent)
	// start(0) ~ end(1)로 쳤을때 percent의 수치는 몇인지 계산해주는 로직

	// 선형그래프를 쉽게 그릴 수 있다.(일자로 쭉 된 그래프)

	// 야매로 짜는거라서 

}

void Comment6()
{
	// inline명령어 (빠르다)
	// (외울필요도 없고, 몰라도 된다. 실제로 모르는 사람이 많음)
	
	// CPU 캐시로 만드는거라 접근속도가 빠르다.
	// define 처럼 빠르다.

	// 근데 왜 모든애들을 다 inline으로 만들지 않냐
	// 제약이 존재함.
	// 1. 헤더파일에서만 inline을 쓸 수 있음
	// 2. CPU캐시로 넣는거라, 용량이 다차면 못넣는다.
	//   << 용량은 누가 제어하나?
	//   << 빌드할때 제어된다. (더많이 사용할거 위주로)
}