Game.cpp 파일


#include "pch.h"
#include "Game.h"
Game::Game()
{

}
Game::~Game()
{

}

void Game::Init(HWND hwnd)
{
	this->_hwnd = hwnd;
	this->_hdc = ::GetDC(this->_hwnd);

	// 더블버퍼링
	::GetClientRect(_hwnd, &_rect);		// 윈도우핸들의 크기를 반환하겠다.

	_hdcBack = ::CreateCompatibleDC(_hdc);  // 유저에게 보이는 화면이랑 최대한 비슷하게 화면을 구성해라.
	_bmpBack = ::CreateCompatibleBitmap(_hdc, _rect.right, _rect.bottom);  // _hdc와 호환되는 비트맵 생성
	HBITMAP prev = (HBITMAP)::SelectObject(_hdcBack, _bmpBack);  // _hdcBack에 _bmp 연결
	::DeleteObject(prev);
	// 여기까지가 화면 두 개를 준비한 상태
	// 앞으로 할 것은 
	// 뒤에 있을 화면에 그림을 그리고
	// 그걸 앞에 화면에 고속복사 할 것


	// 싱글톤 초기화
	Time->Init();
	Input->Init(_hwnd);

	//---------------------------------
	// ## 코드 짜는 곳
	//---------------------------------
	_player.left = 100;
	_player.right = 200;
	_player.top = 100;
	_player.bottom = 200;

	_enemy.left = 250;
	_enemy.right = 300;
	_enemy.top = 200;
	_enemy.bottom = 250;
}

void Game::Updata()
{
	// 싱글톤 업데이트
	Time->Updata();
	Input->Updata();

	//---------------------------------
	// ## 코드 짜는 곳
	//---------------------------------


	//--------------------------------
	// 실습
	// 1. wasd 나 방향키로,
	//	  _player를 움직일 수 있게한다.
	// 2. _player와 _enemy가 부딪히면
	//	  ::MessageBox(_hwnd, L"알림", L"충돌되었습니다", 0);
	//  를 실행한다.
	// 3. _player를 마우스로 클릭하면
	//	  ::MessageBox(_hwnd, L"알림", L"플레이어를 선택하였습니다", 0);
	// 를 실행한다.
	// 
	//--------------------------------
	if (Input->GetKeyDown(KeyCode::Right))
	{
		_player.left += 5;
		_player.right += 5;
	}

	if (Input->GetKeyDown(KeyCode::Left))
	{
		_player.left -= 5;
		_player.right -= 5;
	}

	if (Input->GetKeyDown(KeyCode::Down))
	{
		_player.top += 5;
		_player.bottom += 5;
	}

	if (Input->GetKeyDown(KeyCode::Up))
	{
		_player.top -= 5;
		_player.bottom -= 5;
	}

	// 충돌 부분
	if ((_player.left <= _enemy.left && _enemy.left <= _player.right && _player.top <= _enemy.top && _enemy.top <= _player.bottom) ||
		(_player.left <= _enemy.right && _enemy.right <= _player.right && _player.top <= _enemy.top && _enemy.top <= _player.bottom) ||
		(_player.left <= _enemy.left && _enemy.left <= _player.right && _player.top <= _enemy.bottom && _enemy.bottom <= _player.bottom) ||
		(_player.left <= _enemy.right && _enemy.right <= _player.right && _player.top <= _enemy.bottom && _enemy.bottom <= _player.bottom))
	{
		::MessageBox(_hwnd, L"충돌되었습니다", L"알림", 0);
	}

	// 클릭했을때 
	// 함수화를 해야하는 이유 -> 영어로 읽는데 읽었을 때 그 의미를 이해할 수 있기 때문에 함수화를 하고 그게 더 좋은 코드다.
	{
		POINT mousePos = Input->GetMousePos();
		if (_player.left < mousePos.x && mousePos.x < _player.right &&
			_player.top < mousePos.y && mousePos.y < _player.bottom)
		{
			if (Input->GetKeyDown(KeyCode::LeftMouse))
			{
				::MessageBox(_hwnd, L"충돌되었습니다", L"알림", 0);
			}
		}
	}

	
	// 선생님 풀이

	//왼쪽버튼 눌렀을때.
	if (Input->GetKeyDown(KeyCode::LeftMouse))
	{
		POINT mousePos = Input->GetMousePos();
		if (Collision::PtInRect(mousePos, _player))
		{
			::MessageBox(_hwnd, L"플레이어를 선택하였습니다", L"알림", 0);
		}
	}

	if (Collision::RectInRect(_player, _enemy))
	{
		::MessageBox(_hwnd, L"충돌 되었습니다.", L"알림", 0);
	}


}

void Game::Render()
{
	//FPS 출력
	{
		uint32 fps = Time->GetFps();
		float deltaTime = Time->GetDeltaTime();

		wstring timeStr = format(L"FPS({0}), DT({1} ms)", fps, static_cast<int32>(deltaTime * 1000));
		::TextOut(_hdcBack, 0, 0, timeStr.c_str(), timeStr.length());
	}


	// 마우스좌표 출력
	{
		POINT mousePos = Input->GetMousePos();
		wstring timeStr = format(L"mouse({0}, {1})", mousePos.x, mousePos.y);
		::TextOut(_hdcBack, 0, 20, timeStr.c_str(), timeStr.length());
	}


	//---------------------------------
	// ## 코드 짜는 곳
	//---------------------------------
	::Rectangle(_hdcBack, _player.left, _player.top, _player.right, _player.bottom);
	::Rectangle(_hdcBack, _enemy.left, _enemy.top, _enemy.right, _enemy.bottom);


	// 비트블릿 : 고속 복사
	// 복사 해줬으면 뒤의 화면의 내용은 지워줘야 한다. 그거까지 한 사이클!
	::BitBlt(_hdc, 0, 0, _rect.right, _rect.bottom, _hdcBack, 0, 0, SRCCOPY); // SRCCOPY = source copy
	::PatBlt(_hdcBack, 0, 0, _rect.right, _rect.bottom, WHITENESS);
	
}