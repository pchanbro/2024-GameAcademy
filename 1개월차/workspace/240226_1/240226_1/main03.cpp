#include <iostream>

using namespace std;

void main()
{
	// 배열
	// 똑같은 변수명으로 여러개의 변수를 만드는 함수

	int num1 = 0;
	int num2 = 0;
	int num3 = 0;
	int num4 = 0;
	int num5 = 0;
	int num6 = 0;
	int num7 = 0;
	int num8 = 0;
	int num9 = 0;
	int num10 = 0;

	// --->

	// 배열 문법
	// 자료형 변수명[크기] = {}
	// {}는 다른 애매한것들에게도 다 통합니다.
	// {} - 비어있는 값으로 초기화한다.
	int num[10] = {};

	// num[0] ~ num[9]까지 생성됩니다.
	num[0] = 1;
	num[1] = 2;
	num[2] = 3;
	num[3] = 4;
	num[4] = 5;
	num[5] = 6;
	num[6] = 7;
	num[7] = 8;
	num[8] = 9;
	num[9] = 10;
	printf("%d\n", num[0]);
	printf("%d\n", num[9]);

	// 프로그래밍은 대부분의 경우에서 0부터 시작한다.

	// num1 ~ num4까지 출력해라! 
	printf("num1 : %d\n", num1);
	printf("num2 : %d\n", num2);
	printf("num3 : %d\n", num3);
	printf("num4 : %d\n", num4);

	// num[0] ~ num[3] 까지 출력해라!
	printf("num[0] : %d\n", num[0]);
	printf("num[1] : %d\n", num[1]);
	printf("num[2] : %d\n", num[2]);
	printf("num[3] : %d\n", num[3]);

	// 배열은 여러개 선언해줄 역할을 해줄뿐이지
	// 막 그렇게 프로그래밍에 윤택한 삶을 제공하진 않는다.
	// 배열 하나로는 그렇다.

	// ENUM + 스위치문 콤보같이 
	// 배열 + 반복문도 콤보다
	
	// => 10이 10번 반복한다를 의미
	for (int i = 0; i < 10; i++)
	{
		printf("num[i] : %d\n", num[i]);
	}

	// 이것도 10번 반복이긴 하지만 위의 것(int = 0 부터)으로 외우는게 좋다.
	for (int i = 0; i <= 10; i++)
	{
		//1 ~ 10
		printf("num[i] : %d\n", num[i]); // 이러면 num[10]때문에 오류나거나 쓰레기값이 출력된다.
	}

	// array => arr으로 줄여씁니다.
	int arr[1000] = {};

	//초기화하고 (arr[0] : 2, arr[1] : 4, arr[2] : 6 ....)
	//출력해보는거 해봐라
	// 0 ~ 999 출력
	
	// '초기화한다' 랑 '출력한다' 는 개념이 다르기 때문에 같은 for문 안에 넣어놓지 말기 -> 함수화 할 때 다르기 때문이다.
	// 즉 배열을 다룰 때는
	// 기능단위로 반복문(for문)을 계속 써줘야 한다.
	for (int i = 0; i < 1000; i++)
	{
		arr[i] = (i + 1) * 2;
	}

	for (int i = 0; i < 1000; i++)
	{
		printf("arr[%d] : %d\n", i, arr[i]);
	}

	// 그니까 이렇게 하면
	// 줄 수도 적고 눈에 한번에 더 잘보이고 좋지않나?? 싶은데
	// 기본적으로 안좋다.
	for (int i = 0; i < 1000; i++)
	{
		arr[i] = (i + 1) * 2;
		printf("arr[%d] : %d\n", i, arr[i]);
	}
	// 다시 말하지만
	// 배열을 다룰 때는 기능단위로 반복문(for문)을 계속 써줘야 한다.
	// 왜 그럴까??
	// 큰 게임에선 이런걸 어떻게 돌리까? 라는 의문을 가져봐라

	// 기능단위로 함수를 만든다.
	// 캐릭터를 움직이낟.
	// MOVE라는 함수로 기능단위로 움직이게 된다.

	// 반복문
	// {
	//   기능1, 기능2;
	// }

	// 배열에서 해주는 역할들을 함수로 만들게되면
	// 예를 들어
	// InitArray();
	// PrintArray();
	// 위의 반복문을 잘라버릴 수가 없다....

	// 이 부분을 함수화 안시킬거라고 생각해도
	// 함수는 (항상) 쪼갤수록 좋고
	// 다른 프로그래머가 할 수도 있다
	
	// 함수로 말을 바꾼다는거 자체가
	// 코드를 말로바꾸는 행위이기 때문에
	// 이게 말이 되어야 한다.

	// 어? 포문 두번돌아가는데 1000번짜리를
	// 성능이슈 (퍼포먼스 이슈) 생기는거 아니에요? -> 절대 안생긴다.
	
	// 실제로 퍼포먼스 이슈가 생겨서 코드를 수정해야하는 단계까지 가라
	// 학생일때 !!
	
	// 퍼포먼스 이슈때문에 코드를 수정해본 경험이 있는 학생과 없는 학생은 차이가 크다.

	// 요즘같이 컴퓨터 성능좋을때, 그래픽 리소스빼고, 순수 코드로만 퍼포먼스 이슈나오기 힘들다.

	// 퍼포먼스 생각하다가 코딩 못하게된다.
	// 이럼 안된느데, 저럼 안되는데
	//  더 좋은 방법 없을까?

	// 코드 리뷰
	// 남의 코드를 보고 이런식으로 짰으면 더 좋지 않을까? 하는 탁상공론 하는 것
	// 주로 코드를 라이브(테섭말고 본섭)에 보낼 때 주로 합니다.
	// 자기가 생각하고 짠 코드랑
	// 생각안하고 이렇게 해야될 것 같았다 라는 코드랑
	// 같은 내용이라도 사람마다 허용치가 다름.
	// 코드마다 철학이 들어있기 때문에
}