#include <iostream>

using namespace std;

void main()
{
	// 문자열
	
	// 문자 자료형

	char c = 'a'; // char은 -128 ~ 127을 다룰 수 있다.(정수형이긴 하다)

	cout << c << endl;

	// char str = 'sdfase'; // 문자 여러개를 적으면 에러가 난다. 
	// 한글을 적어도 에러, 출력이 안된다.

	char c1 = 65;

	cout << c1 << endl; // A가 출력된다.
	// ASCII코드 : 프로그래밍에서 정해둔 문자 규약, 인터넷 검색하면 표 나옴
	// A => 65, B => 66

	// char 두개를 엮어서 한글도 표현하자(세계 각국의 언어를) -> wchar라는거 검색해봐

	// "" => 문자열
	char str1[10] = "박찬형";
	cout << str1 << endl;
	
	char str2[128] = "박찬형";
	cout << str2 << endl;

	int num1 = 3;
	int num2 = 3;

	if (num1 == num2)
	{
		printf("num1과 num2가 같습니다. \n");
	}

	if (str1 == str2) // 배열 = 포인터 이기에 여기서는 주소값을 비교한다.
	{
		printf("str1과 str2의 주소값이 같습니다. \n");
	}
	if (*str1 == *str2) // 그렇다고 *str1처럼 넣으면 맨 처음값만 비교한다.
	{
		printf("str1과 str2의 첫 값이 같습니다. \n");
	}

	// 배열 = 포인터
	// 문자열을 단순히 == 으로 비교하면 주소값으로 비교하는 것이다.
	// *을 붙여서 비교하면 맨 앞글자만 비교하게 된다.
	
	// 그러면 문자열 비교는 어떻게 하는 것인가?
	// strcmp (string compare)을 사용한다.
	// strcmp의 결과가 0이면 같다는 의미

	if (strcmp(str1, str2) == 0)
	{
		printf("str1과 str2가 같습니다. \n");
	}

	//strcmp
	// -1, 0, 1
	// -1 => str1의 값이 더 사전순으로 앞에있다.
	// 0 => 같다
	// 1 => str2의 값이 사전순으로 더 앞에있다.

	// "" => 문자열
	// 근데 문자열의 마지막에는 \0이 온다. 그게 있어야 문자열이 끝났음을 인식한다.
	// 그러므로 문자열은 한칸을 항상 확보해야한다.
	char str3[5] = "abcd";
	char str4[128] = "abcdef";
	// 문자열을 변수로 잡을 때 예시
	// 몬스터 이름
	// 한국말로, 골렘
	//			gollem
	//			근데 인도어, 러시아어는 문자열길이가 남다르다.
	// 그렇기에 진짜 넉넉하게 잡아주는게 좋다.

	// 예전에 슈퍼마리오 만들던 시절에는
	// 메모리가 부족해서 아껴 코딩을 했으나
	// 요즘은 그런거 업다.
	// 메모리 기본적으로 16GB 끼고있다 요즘은
}