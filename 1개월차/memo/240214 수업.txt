3. 프로그램 동작 원리

RAM(용량) 
용량에 속한 4가지 (면접에 나올걸?)
- Code : 프로그래밍 명령어 
ex) printf("출력할 대사"); <- 이런것들도 0과 1로 이루어져 있다. 컴파일을 통해 CPU가 읽을 수 있도록 만든다.

- Data : 좌표나 이런 데이터를 담는 공간

- Heap

- Stack

컴퓨터 : 0과 1로 이루어져 있다. 구글에 intel insturtion 검색하면 표같은게 나옴
- > Ram도 0과 1로 이루어져 있다. 

CPU 종류 ( AMD칩, Intel칩 주로 이 2개, Android, Apple, Mac Silicon) (Android, Apple는 컴파일을 보통 안해주는데 이거 해주면 뭐라더라..?)

4. 롤 게임을 예시로 이런 게임을 만들기 위해
캐릭터 좌표값, 레벨, HP, MP, 스킬 쿨타임 등 하나하나가 다 데이터
이런 기억해야 하는 내용 : Data, 변수, 기억해야 하는 내용
Data, Heap, Stack은 이런 변수, 상수, Data 기억 공간이다. 당분간 수업에선 상수도 변수라 부르겠다(편해서)

5. 컴파일
컴파일의 필요성 - CPU칩 종류마다 구조가 다르기 때문에 그런 구조 표를 보고 개발하기에는 생산성이 너무 떨어짐
컴파일 - 그래서 만들어진 것이 C, C++ 같은 언어들, 이 언어들이 CPU칩에 맞게 프로그램을 생성해주는 과정이 컴파일

6. Unity, Unreal -> 크로스플랫폼 엔진

Amd, Intel -> 명령어 셋이 다르다. 특히 Android, MacOS로 가면 더 심해진다.
Android -> JAVA로 밖에 개발을 못함.
MacOS -> 애플이 만든 언어로밖에 개발을 못함(Object-C, Swift)

크로스플랫폼 엔진 -> 컴파일을 할 때, 각 OS에 맞게 언어를 변경해주는 역할 + 칩셋에 맞게 조정해주는건 덤

7. visual studio 시작 
당분간은 빈 프로젝트로 시작!
repository는 작업하는 폴더 위치로 항상 설정!

iostream : input과 output stream을 모아둔 곳 stdio.h stdlib.h 등등이 다 포함되어 있다.

using namespace std; -> std관련 함수를 편하게 사용하기 위한 장치, 이거 안하면 (std::함수명) 이런식으로 사용해야함

모든 프로그램은 main 함수를 찾아서 실행하게 된다.
그렇기에 모든 로직은 main에 있어야 한다.
:: 을 치면 내가 쓸 수 있는 함수를 모두 볼 수 있다. ::뒤에 내가 원하는 함수의 일부를 기억해서 검색하는 용도로 사용 가능

visual studio의 실행키는 F5 인데 이게 콘솔창이 꺼지는 경우엔 Ctrl + F5로 실행하면 된다.

