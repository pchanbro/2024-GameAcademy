뭘 배우던 간에 암기는 항상 존재한다.

프로그래밍은 1년까지는 암기가 더 많다!!!

앞으로 1달간 콘솔 프로젝트를 할 때는 
#include<iostream>

using namespace std;

void main()
{
	
}
이 구조는 기본이다.


3. 프로그램 동작 원리

RAM(용량) 
용량에 속한 4가지 (면접에 나올걸?)
- Code : 프로그래밍 명령어 
ex) printf("출력할 대사"); <- 이런것들도 0과 1로 이루어져 있다. 컴파일을 통해 CPU가 읽을 수 있도록 만든다.

- Data : 좌표나 이런 데이터를 담는 공간

- Heap

- Stack

컴퓨터 : 0과 1로 이루어져 있다. 구글에 intel insturtion 검색하면 표같은게 나옴
- > Ram도 0과 1로 이루어져 있다. 

CPU 종류 ( AMD칩, Intel칩 주로 이 2개, Android, Apple, Mac Silicon) (Android, Apple는 컴파일을 보통 안해주는데 이거 해주면 뭐라더라..?)



4. 롤 게임을 예시로 이런 게임을 만들기 위해
캐릭터 좌표값, 레벨, HP, MP, 스킬 쿨타임 등 하나하나가 다 데이터
이런 기억해야 하는 내용 : Data, 변수, 기억해야 하는 내용
Data, Heap, Stack은 이런 변수, 상수, Data 기억 공간이다. 당분간 수업에선 상수도 변수라 부르겠다(편해서)



5. 컴파일
컴파일의 필요성 - CPU칩 종류마다 구조가 다르기 때문에 그런 구조 표를 보고 개발하기에는 생산성이 너무 떨어짐
컴파일 - 그래서 만들어진 것이 C, C++ 같은 언어들, 이 언어들이 CPU칩에 맞게 프로그램을 생성해주는 과정이 컴파일



6. Unity, Unreal -> 크로스플랫폼 엔진

Amd, Intel -> 명령어 셋이 다르다. 특히 Android, MacOS로 가면 더 심해진다.
Android -> JAVA로 밖에 개발을 못함.
MacOS -> 애플이 만든 언어로밖에 개발을 못함(Object-C, Swift)

크로스플랫폼 엔진 -> 컴파일을 할 때, 각 OS에 맞게 언어를 변경해주는 역할 + 칩셋에 맞게 조정해주는건 덤



7. CPU는 뇌, GPU는 보조역할(핫식스같은거)

근데 GPU가 더 비쌈, 보조지만 처리속도가 빠르기 때문(로봇), (게임 및 영상처리에만 사용) 
GPU는 사용하려면 코드에서 따로 명령을 해줘야 함 -> 하드웨어 가속

하지만 CPU가 명령어 칩셋을 가지고 있기 때문에 메인으로 써야한다.(GPU는 명령어 칩셋이 없어 메인으로 사용이 불가)



8. 2진수 (2진수랑 많이 친해야 한다.)
N진수 -> 모든 수를 N까지만 사용해서 표현하는 숫자 형태
실생활에서 사용하는 숫자는 10진수
2진수는 0과 1만 사용 가능하다.

10진수	10	11	12	13	14	15	16	17	18	19 
 2진수	1010	1011	1100	1101	1110	1111	10000	10001	10010	10011
 4진수	22	23	30	31	32	33	100	101	102	103
 8진수	12	13	14	15	16	17	20	21	22	23
16진수	A	B	C	D	E	F	10	11	12	13
컴퓨터 계산기를 써야할 때가 있을것이다, 2진수 16진수, 8진수를 확인하기 위해서
계산기 좌측위의 목록에서 <프로그래머>를 누르면 확인 가능



9. visual studio 시작 
당분간은 빈 프로젝트로 시작!
repository는 작업하는 폴더 위치로 항상 설정!

항상 자리를 바꾸면 <도구> - <옵션> 에서 자신만의 설정을 해주는게 좋다.
<환경> 에서 (어둡게), 글꼴 및 색은 (진한 색으로 된) 걸로 고르기 이거로 안고르면 글자마다 크기가 달라져서 구분이 어려워질 수 있음 자주 쓰는건 (Consolas)
<텍스트 편집기> 에서 <C/C++>에서 - <줄 번호> 체크해주기
또 <C/C++>의 <탭>에서 <공백 삽입> 혹은 <탭 유지>를 사용하는데 회사마다 다름 지금은 <탭 유지> 사용


iostream : input과 output stream을 모아둔 곳 stdio.h stdlib.h 등등이 다 포함되어 있다.

using namespace std; -> std관련 함수를 편하게 사용하기 위한 장치, 이거 안하면 (std::함수명) 이런식으로 사용해야함

모든 프로그램은 main 함수를 찾아서 실행하게 된다.
그렇기에 모든 로직은 main에 있어야 한다.
:: 을 치면 내가 쓸 수 있는 함수를 모두 볼 수 있다. ::뒤에 내가 원하는 함수의 일부를 기억해서 검색하는 용도로 사용 가능

visual studio의 실행키는 F5 인데 이게 콘솔창이 꺼지는 경우엔 Ctrl + F5로 실행하면 된다.

