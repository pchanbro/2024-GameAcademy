#include "pch.h"


void Comment1()
{
	// 1. Event 디자인패턴
	//  - 디자인패턴 : 
	//       그냥 이런식으로하니까 뭐가 편하더라 하는 코드 작성 방식

	//  - Event 디자인패턴 << Event로 무언가를 다루니까 뭐가 편하더라

	// Observer 패턴 
	//   Observer 패턴 << 이 패턴은 좀 많이 유명합니다.
	//                 << 학부에서도 쓸데없이 계속나와서,, 유명해졌습니다.


	//--------------------------------------------------
	// Observer 패턴이란 
	// 
	//  특정 객체를 관측하고있다가. 그 객체가 변경되면, 알려주는 패턴

	// MyClass a;
	// a.AddListen(&OnListen_AValueChanged);
	// a.SetChangeValue(10);

	// 특정함수가 호출됩니다. (ex. OnListen_AValueChanged)
	// void OnListen_AValueChanged() { } 
	//

	// 간단하게, a 객체에 OnListen_AValueChanged 함수포인터를 주입해주고, 
	// SetChangeValue라는 함수가 호출되면, OnListen_AValueChanged도 같이 호출되게끔 세팅해준다.
	//--------------------------------------------------


	//--------------------------------------------------
	// Observer 패턴의 장점
	//  - 초기화 문에서, 모든 로직의 흐름을 파악할 수 있다.
	// 
	//  초기화문 : 
	// MyClass a;
	// a.AddListen(&OnListen_AValueChanged);
	// 
	//  주요 로직 : 
	// a.SetChangeValue(10);
	// 
	//=======================================
	//		Observer 패턴을 사용시
	//=======================================
	//  초기화문 : 
	// User user;
	// user.AddListen_AddItem(&AddLog);
	// 
	//  주요로직 : 
	// user.AddItem(item);
	// 
	//=======================================
	//		Observer 패턴을 사용 안할 시 
	//=======================================
	// 초기화문:
	// User user;
	// 
	//  주요로직 : 
	// user.AddItem(item);
	// AddLog(user, item);
	// 
	//  => 주요로직이 한두줄이 아닙니다.
	//  => 눈속임을 위한 코드, 더미용 코드 등등 되게 많아요.
	//--------------------------------------------------
	// 
	// 단점 : 
	//  코드 진입장벽이 좀 높아집니다.
	//  Why? :  함수포인터를 사용한다.
	// 
	//--------------------------------------------------
}