#include "pch.h"

void Comment1()
{
	//1. 타일맵액터에 카메라 적용.
	//2. (Culling) - 안보이는 부분은 굳이 그릴필요가 없음.
	//3. 젤다 캐릭터 등장
	//4. 캐릭터 움직임
}

void Comment2()
{
	//1. 타일맵액터에 카메라 적용.
}

void Comment3()
{
	// Culling
	// 굳이 사용자가 보지도 못할 공간을 Render할 
	/*필요가 없음.

		Culling 이라고 카메라가 비추지 않는 영역은
		Render를 안하도록하는 기법*/
}

void Comment4()
{
	// 캐릭터
	// TileActor

	// 일반캐릭터 



	// Actor, Controller 분리작업
	// Actor -> 배우 (기능만 들고있음)

	// Controller -> 게임 로직을 담당
	//  - 키보드를 누르면 왼쪽으로가라.
	//  - 마우스를 누르면 어디로가라.



	// 나는 일단 게임은 어떻게든 만들순있겠다.
	// 하지만, [Actor, Controller] 개념은 잘 모르겠다.
	// 머릿속으로 생각만해두고 쓰지마세요.



	// 맵툴 지금 잘동작하고있는거 같은데
	// 왜 바꿔요??

	// 맵툴액터 => 등장객체 (기능)
	// 스스로 능동적으로 키보드인풋을받아서 뭔가 게임로직을 형성하려하면 안됨.

}

void Comment5()
{
	// - assert
	// assert : 개발중에만 오류표시해주는 기능
	// assert( 조건 ) 
	// 조건이 참일떄만 코드를 통과하고,
	// 조건이 거짓이면, 에러를 내보낸다. (프로그램이 뻑난다)

	// 언제쓰냐??
	// [유효성체크.]

	// 
}

void Comment6()
{
	// 실습
	// 캐릭터 움직이는걸 타일맵 움직이는거랑 동일하게 맞추기.
	// (왼쪽키를 누르면, 왼쪽타일로 한칸)
	// (오른쪽키를 누르면, 오른쪽타일로 한칸)
	// ...
	// 4방향 모두 완료

	// 9시까지 시간드리겠습니다.

	// 30분동안 Direct X 렌더링파이프라인 설명
}

void Comment7()
{
	// 렌더링 파이프라인

	// DirectX 수업을 3개월과정
	// 아주 길게함.

	// 보통 수업들으면 남는게 없습니다.

	// DirectX 는 코드가 중요한게 아닙니다.

	// 렌더링 파이프라인
	// -> 


	// Windows API 그림을 어떻게 그리죠?
	//  - 비트맵 그림그리는 함수를 사용해서 그림을 그립니다.
	//  - TransparentBlt, BitBlt 등.
	//  -> CPU 를 사용해서 그림을 그림.


	// CPU를 사용해서 그림을 그리다보니,
	// 게임 최적화 => 그림 그리는거.
	// CPU가 GPU보다 못해도 50배는 느립니다.
	// 상당히 비효율적이고 느려집니다.

	// GPU => 그래픽카드를 사용해서 빠르게 그림을 그리는 방법
	// [하드웨어 가속] 이거를 이제 코드로 컨트롤할수있게해주겠다.
	// Direct X 개념.
	// (GPU를 내맘대로 컨트롤하겠다.)

	// Game Engine, Direct X로 만든게임들보면, 
	// 뭔가 많이 그림을그리는데, 크게 안느려요.

	// 그러면
	// 어떻게해야 GPU를 쓸수있을까?

	// GPU는 하드웨어영역.
	// 그렇게 많이는 안열어줬어요.

	// 렌더링 파이프라인을 구축해서
	// 이순서대로 렌더링을 해라.

	// 1. Vertex Shader
	// 2. Tessellation
	// 3. Geometry Shader
	// 4. Rasterization
	// 5. Pixel Shader (Fragment Shader)
	// 6. Frame Buffer

	// GPU를 쓰기위해서는
	// CPU에서 정리된 데이터를 GPU에 넘겨줘야 일을 할 수 있습니다.
	// 크게 2가지
	// [Shader라는 코드] (HLSL 문법), Vertex Data

	// Shader - C++, C# 이런것처럼 고급 문법 (단지 GPU를 위한..)
	// 테크니컬아티스트 << Shader 코드를 짜는사람
	// 요즘은 AI가 짜거나, Visual Shader (아티스트가 딸깍딸깍으로 만들수있게)


	// Direct X => 3D 게임
	
	// Vertex Data (정점 위치)
	// 3D 모델 

	//Game (World, Camera)

	// ★1. Vertex Shader (★CPU)
	//  - Vertex Data를 넘겨줍니다.
	//  - World, View, Projection 이라는 과정을 거칩니다. (4x4 행렬)
	//  World - (게임세상에 존재하는 모든 모델들의 정점 데이터를 List로 만든다.)
	//  View - (World에 있는 모든 정점데이터들을 내 현재 카메라 맞게 수정해준다.)
	//  Projection - (View까지 끝난 데이터를 실제로 스크린화면에 맞춰서 재조정)
	//			   - 최적화 (안그려도되는 모델같은 경우에는 여기서 컷) (frustom culling)

	// 2. Tessellation (최적화작업)
	//  - (화면전체크기 보편적으로 1920 * 1080 => 이거에 비해 너무 정점수가 많음)
	//  - Level Of Detail (LOD)
	//   - 멀리서 찍을수록, 로우 폴리곤 모델을 사용하도록 변경 (모델러가 작업필요)

	// 3. Geometry Shader (퀄리티작업) (최적화반대)
	//  - 그림자를 만드는 작업.
	//  - 먼저 그림을 그립니다.
	//  - 2번 그림을 그리는거기때문에 (그림자 on 하면, 부하가 2배)
	//  - 게임하다가 렉걸려서, 가장 최적화모드로 바꿨더니
	//  - 그림자가 모두 없어졌다.

	// ★4. Rasterization (픽셀 대입) (GPU)
	//   - 각 pixel당, 어떤색으로 칠하면될지, 색 보간작업 진행.
	//   - Texture 입히기


	// ★5. Pixel Shader (Fragment Shader) (GPU)
	//  - 1920 * 1080 => 이숫자만큼 
	//  - 매프레임 2,073,600 만큼 계산 진행
	//  - (4K) 매프레임 8,294,400 만큼 계산 진행
	//   - 조명 효과, 오브젝트끼리 조명을 방해하는 것 등.

	// 6. Frame Buffer  (엔진에서도 직접 다뤄야합니다.) (엔진 작업중에서도 가장 최상급으로 분류돼요.)
	//  - Alpha Blending
	//    Alpha끼리 만났을때 다른색으로 나와야 겠죠
	//  - Stencil Buffer (최종기믹 효과)
	//    얘가 좀 어려운데  추리게임(방탈출게임)
	//    [책상안쪽 확인하기]  돋보기로 가져다대면 ( 책상모델은 그대로있는데, 책상 안쪽보여주는 )
	//  - Z-Test 
	//   (그래서 누가 앞에있는 모델인지)
	//	 Windows API에서도  Layer에 따라서 먼저 그려주는 순서가 달라짐.
	//   카메라중에 앞에있으면 나중에 그려줌. (먼거부터 그림그리기)


}