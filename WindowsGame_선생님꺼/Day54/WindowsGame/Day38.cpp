#include "pch.h"


void Comment1()
{
	// 오늘 수업 내용 


	// 1. 숙제 풀이.
	//  - 타일 이동

	// 2. 길찾기 알고리즘 (많이 어렵습니다)
	//  - 많은 알고리즘을 배워야합니다.

	//  - 길찾기 알고리즘을 확실하게 이해하기위해서
	//   - 다른 부수적인 알고리즘을 같이배울겁니다.
	//   - 왜 저렇게 발전되었는지

	//   - 당분간 콘솔프로젝트를 할거에요. ( 이번주 내내? )

	//   - 유일하게 코테랑 관련이 있는데 현업이랑도 관련이 있는 알고리즘.

}

void Comment2()
{
	// 타일이동

	// - 구현하기전에 노트 (Best), 주석으로 생각을 정리하고 가는게 좋아요.

	// <타일맵 게임>
	// 이동 시퀀스

	// 플레이어 입장 (컨트롤러 입장)
	//  - 키를 누르면
	//  - 움직인다. (한칸을 움직인다.)

	// Console 프로젝트면 저렇게해도 큰문제가 없어요.
	// 자연스러운 이동이 없기 때문에 순간이동해도 크게 문제가 없습니다.

	// Update 개념.


	// Controller 
	//  - 키를 누르면
	//  - DestPos를 정해준다. (도착지점 포지션) (컨트롤러입장)
	// 
	//  Character Update
	//  - DestPos이 될때까지 해당 방향으로 계속 이동한다. (캐릭터입장)



	// <타일맵 게임> - cellPos 를 사용하면 추후 유용함.

	// TilemapActor - 타일맵자체를 말하는 액터 (햇갈리지 말것)
	
	// interface - C++ 에서의 interface는 상속과 같음.
	//  - 함수만 제공하겠다.
	//  - 이거를 상속받은 객체에

	// 타일맵 게임에 등장하는 Actor한테 주는 함수들 - ITilemapActor


	// Vector2 같은 애매한 값으로 들고있는게 아니라,
	// CellPos같은 확실한 타일값을 알려주는게
	// 나중에 더 유용합니다. (서버, 버그수정 등등)



	// 충돌체크.
	//  - 충돌체크 이후 움직이는 로직의 방식

	// 2가지 방법
	
	// 1. 움직이고난 후에
	//   - 뭔가에 걸리면, 돌아온다.

	// 2. 움직이기 전에 
	//   - 거기가 갈수있는 곳인지 체크하고 움직인다.

}


void Comment3()
{
	// 길찾기 알고리즘

	//  - 이진트리 (Binary Tree)
	//  - 이진트리 단점

}